From 5338b5d76b2e303a39a194542bb18f1a1d083319 Mon Sep 17 00:00:00 2001
From: Olivier Brunel <jjk@jjacky.com>
Date: Wed, 19 Feb 2014 15:11:08 +0100
Subject: [PATCH 1/2] GRWLock: Tweak doc to make things a bit clearer

The doc used different phrasing for the same thing, e.g. "if any thread"
vs "any another thread."

Also make it clear that trying to take a write lock while already having
a lock, or trying to take a read lock while having a write lock, is
undefined.

Signed-off-by: Olivier Brunel <jjk@jjacky.com>
---
 glib/gthread-posix.c | 20 ++++++++++++++++----
 1 file changed, 16 insertions(+), 4 deletions(-)

diff --git a/glib/gthread-posix.c b/glib/gthread-posix.c
index 5fff51477..2aa7ca688 100644
--- a/glib/gthread-posix.c
+++ b/glib/gthread-posix.c
@@ -529,10 +529,13 @@ g_rw_lock_clear (GRWLock *rw_lock)
  * g_rw_lock_writer_lock:
  * @rw_lock: a #GRWLock
  *
- * Obtain a write lock on @rw_lock. If any thread already holds
+ * Obtain a write lock on @rw_lock. If another thread currently holds
  * a read or write lock on @rw_lock, the current thread will block
  * until all other threads have dropped their locks on @rw_lock.
  *
+ * Calling g_rw_lock_writer_lock() while the current thread already
+ * owns a read or write lock on @rw_lock leads to undefined behaviour.
+ *
  * Since: 2.32
  */
 void
@@ -548,8 +551,9 @@ g_rw_lock_writer_lock (GRWLock *rw_lock)
  * g_rw_lock_writer_trylock:
  * @rw_lock: a #GRWLock
  *
- * Tries to obtain a write lock on @rw_lock. If any other thread holds
- * a read or write lock on @rw_lock, it immediately returns %FALSE.
+ * Tries to obtain a write lock on @rw_lock. If another thread
+ * currently holds a read or write lock on @rw_lock, it immediately
+ * returns %FALSE.
  * Otherwise it locks @rw_lock and returns %TRUE.
  *
  * Returns: %TRUE if @rw_lock could be locked
@@ -588,12 +592,20 @@ g_rw_lock_writer_unlock (GRWLock *rw_lock)
  *
  * Obtain a read lock on @rw_lock. If another thread currently holds
  * the write lock on @rw_lock or blocks waiting for it, the current
- * thread will block. Read locks can be taken recursively.
+ * thread will block until the write lock was (held and) released.
+ *
+ * Calling g_rw_lock_reader_lock() while the current thread already
+ * owns a write lock leads to undefined behaviour. Read locks however
+ * can be taken recursively, in which case you need to make sure to
+ * call g_rw_lock_reader_unlock() the same amount of times.
  *
  * It is implementation-defined how many threads are allowed to
  * hold read locks on the same lock simultaneously. If the limit is hit,
  * or if a deadlock is detected, a critical warning will be emitted.
  *
+ * It is implementation-defined how many read locks are allowed to be
+ * held on the same lock simultaneously.
+ *
  * Since: 2.32
  */
 void
-- 
2.15.1

