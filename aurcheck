#!/bin/bash
readonly argv0=aurcheck
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

declare -i geq=0 cmp=0 ver=1

list_repo_equal() {
    declare -r root=$1 db=$2

    sort -k 1b,1 | join -a 1 - <(list_repo "$root/$db".db | sort -k 1b,1) | while {
        read -r pkg v_in v_cmp _
    } do
        if [[ $v_cmp ]]; then
            if [[ $v_in != "$v_cmp" ]]; then
                op=$(vercmp "$v_cmp" "$v_in")
            else
                op=0
            fi
        else
            # Package was found on an unpairable line, and is therefore
            # not included in the database.
	    v_cmp=0; op=-1
        fi

        case $op in
            -1) msg2 "$pkg $v_cmp -> $v_in" ;;
             0) printf '%s\n' "$pkg" ;;
             1) warning "$pkg $v_cmp is newer than $v_in" ;;
        esac
    done
}

quickcheck() {
    declare -ri ver=$1 geq=$2

    tee "$tmp"/stdin | awk '{print $1}' | aurver > "$tmp"/aur.tsv || exit

    sort -k 1b,1 "$tmp"/stdin | join -a 1 - <(sort -k 1b,1 "$tmp"/aur.tsv) | while {
        read -r pkg v_in v_cmp _
    } do
        if [[ $v_cmp ]]; then
            if [[ $v_in != "$v_cmp" ]]; then
                op=$(vercmp "$v_in" "$v_cmp")
            else
                op=0
            fi
        else
            if ((geq > 1)); then
                v_cmp=0; op=1
            else
                continue
            fi
        fi

        if ((!geq && op > -1)); then
            continue
        fi

        if ((!ver)); then
            printf '%s\n' "$pkg"
        else
            case "$op" in
                -1) printf '%s %s -> %s\n' "$pkg" "$v_in" "$v_cmp" ;;
                 0) printf '%s %s = %s\n'  "$pkg" "$v_in" "$v_cmp" ;;
                 1) printf '%s %s <- %s\n' "$pkg" "$v_in" "$v_cmp" ;;
            esac
        fi
    done
}

aurver() {
    xargs -r aursearch -Fr | jq -er '.[].results[] | [.Name,.Version,.Maintainer] | @tsv'
}

syncver() {
    # Use --exact as repos may have a common substring (#166)
    pacsift --exact --repo="$1" --null <&- | xargs -0r pacman -Sddp --print-format '%n %v'
}

list_repo() {
    bsdcat "$1" | awk '/%NAME%/    {getline; printf("%s\t", $1)}
                       /%VERSION%/ {getline; printf("%s\n", $1)}'
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    plain "usage: $argv0 [-acq] [-d repository] [-r root]"
    exit 1
}

readonly -f list_repo_equal quickcheck aurver syncver list_repo trap_exit usage

source /usr/share/makepkg/util.sh || exit

if [[ -t 2 ]]; then
    colorize
fi

unset db root
while getopts :acd:qr: OPT; do
    case $OPT in
        a) ((geq++)) ;;
        c) cmp=1 ;;
        d) db=$OPTARG ;;
        q) ver=0 ;;
        r) root=$OPTARG ;;
        *) usage ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

tmp=$(mktemp -dt "$argv0".XXXXXXXX) || exit
trap 'trap_exit' EXIT

if [[ -v db ]]; then
    if ((cmp)); then
        root=${root-$(pacconf --single --repo="$db" Server)} || exit
        list_repo_equal "${root#*://}" "$db"
    else
        syncver "$db" | quickcheck "$ver" "$geq"
    fi
else
    quickcheck "$ver" "$geq"
fi

# vim: set et sw=4 sts=4 ft=sh:
