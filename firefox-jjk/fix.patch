--- a/dom/media/MediaDecoder.cpp.orig	2015-09-27 20:13:35.662854572 +0200
+++ b/dom/media/MediaDecoder.cpp	2015-09-27 20:19:20.329506219 +0200
@@ -54,9 +54,13 @@
 // avoid redefined macro in unified build
 #undef DECODER_LOG
 
+#if defined(PR_LOGGING)
 PRLogModuleInfo* gMediaDecoderLog;
 #define DECODER_LOG(x, ...) \
   MOZ_LOG(gMediaDecoderLog, LogLevel::Debug, ("Decoder=%p " x, this, ##__VA_ARGS__))
+#else
+#define DECODER_LOG(x, ...)
+#endif
 
 static const char* const gPlayStateStr[] = {
   "START",
@@ -115,22 +119,26 @@
 
 StaticRefPtr<MediaMemoryTracker> MediaMemoryTracker::sUniqueInstance;
 
+#if defined(PR_LOGGING)
 PRLogModuleInfo* gStateWatchingLog;
 PRLogModuleInfo* gMediaPromiseLog;
 PRLogModuleInfo* gMediaTimerLog;
 PRLogModuleInfo* gMediaSampleLog;
+#endif
 
 void
 MediaDecoder::InitStatics()
 {
   AbstractThread::InitStatics();
 
+#if defined(PR_LOGGING)
   // Log modules.
   gMediaDecoderLog = PR_NewLogModule("MediaDecoder");
   gMediaPromiseLog = PR_NewLogModule("MediaPromise");
   gStateWatchingLog = PR_NewLogModule("StateWatching");
   gMediaTimerLog = PR_NewLogModule("MediaTimer");
   gMediaSampleLog = PR_NewLogModule("MediaSample");
+#endif
 }
 
 NS_IMPL_ISUPPORTS(MediaMemoryTracker, nsIMemoryReporter)
diff --git a/gfx/2d/Factory.cpp b/gfx/2d/Factory.cpp
--- a/gfx/2d/Factory.cpp
+++ b/gfx/2d/Factory.cpp
@@ -47,24 +47,26 @@
 #include "SourceSurfaceRawData.h"
 
 #include "DrawEventRecorder.h"
 
 #include "Logging.h"
 
 #include "mozilla/CheckedInt.h"
 
+#if defined(PR_LOGGING)
 GFX2D_API PRLogModuleInfo *
 GetGFX2DLog()
 {
   static PRLogModuleInfo *sLog;
   if (!sLog)
     sLog = PR_NewLogModule("gfx2d");
   return sLog;
 }
+#endif
 
 // The following code was largely taken from xpcom/glue/SSE.cpp and
 // made a little simpler.
 enum CPUIDRegister { eax = 0, ebx = 1, ecx = 2, edx = 3 };
 
 #ifdef HAVE_CPUID_H
 
 #if !(defined(__SSE2__) || defined(_M_X64) || \
diff --git a/gfx/2d/Logging.h b/gfx/2d/Logging.h
--- a/gfx/2d/Logging.h
+++ b/gfx/2d/Logging.h
@@ -17,17 +17,19 @@
 
 #if defined(MOZ_WIDGET_GONK) || defined(MOZ_WIDGET_ANDROID)
 #include "nsDebug.h"
 #endif
 #include "Point.h"
 #include "BaseRect.h"
 #include "Matrix.h"
 
+#if defined(MOZ_LOGGING)
 extern GFX2D_API PRLogModuleInfo *GetGFX2DLog();
+#endif
 
 namespace mozilla {
 namespace gfx {
 
 // Attempting to be consistent with prlog values, but that isn't critical
 // (and note that 5 has a special meaning - see the description
 // with sGfxLogLevel)
 const int LOG_CRITICAL = 1;
@@ -37,31 +39,33 @@ const int LOG_DEBUG_PRLOG = 4;
 const int LOG_EVERYTHING = 5; // This needs to be the highest value
 
 #if defined(DEBUG)
 const int LOG_DEFAULT = LOG_EVERYTHING;
 #else
 const int LOG_DEFAULT = LOG_CRITICAL;
 #endif
 
+#if defined(MOZ_LOGGING)
 inline mozilla::LogLevel PRLogLevelForLevel(int aLevel) {
   switch (aLevel) {
   case LOG_CRITICAL:
     return LogLevel::Error;
   case LOG_WARNING:
     return LogLevel::Warning;
   case LOG_DEBUG:
     return LogLevel::Debug;
   case LOG_DEBUG_PRLOG:
     return LogLevel::Debug;
   case LOG_EVERYTHING:
     return LogLevel::Error;
   }
   return LogLevel::Debug;
 }
+#endif
 
 class PreferenceAccess
 {
 public:
   virtual ~PreferenceAccess();
 
   // This should connect the variable aVar to be updated whenever a preference
   // aName is modified.  aDefault would be used if the preference is undefined,
@@ -128,19 +132,22 @@ struct BasicLogger
   // For efficiency, this method exists and copies the logic of the
   // OutputMessage below.  If making any changes here, also make it
   // in the appropriate places in that method.
   static bool ShouldOutputMessage(int aLevel) {
     if (PreferenceAccess::sGfxLogLevel >= aLevel) {
 #if defined(MOZ_WIDGET_GONK) || defined(MOZ_WIDGET_ANDROID)
       return true;
 #else
+#if defined(MOZ_LOGGING)
       if (MOZ_LOG_TEST(GetGFX2DLog(), PRLogLevelForLevel(aLevel))) {
         return true;
-      } else if ((PreferenceAccess::sGfxLogLevel >= LOG_DEBUG_PRLOG) ||
+      } else
+#endif
+      if ((PreferenceAccess::sGfxLogLevel >= LOG_DEBUG_PRLOG) ||
                  (aLevel < LOG_DEBUG)) {
         return true;
       }
 #endif
     }
     return false;
   }
 
@@ -155,19 +162,22 @@ struct BasicLogger
     //
     // If making any logic changes to this method, you should probably
     // make the corresponding change in the ShouldOutputMessage method
     // above.
     if (PreferenceAccess::sGfxLogLevel >= aLevel) {
 #if defined(MOZ_WIDGET_GONK) || defined(MOZ_WIDGET_ANDROID)
       printf_stderr("%s%s", aString.c_str(), aNoNewline ? "" : "\n");
 #else
+#if defined(MOZ_LOGGING)
       if (MOZ_LOG_TEST(GetGFX2DLog(), PRLogLevelForLevel(aLevel))) {
         PR_LogPrint("%s%s", aString.c_str(), aNoNewline ? "" : "\n");
-      } else if ((PreferenceAccess::sGfxLogLevel >= LOG_DEBUG_PRLOG) ||
+      } else
+#endif
+      if ((PreferenceAccess::sGfxLogLevel >= LOG_DEBUG_PRLOG) ||
                  (aLevel < LOG_DEBUG)) {
         printf("%s%s", aString.c_str(), aNoNewline ? "" : "\n");
       }
 #endif
     }
   }
 };
 

