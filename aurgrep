#!/bin/bash
readonly argv0=aurgrep
readonly aurweb='https://aur.archlinux.org'
readonly cache=${XDG_CACHE_HOME:-$HOME/.cache}/$argv0
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

# The update interval is set to 5 minutes by default.
# https://lists.archlinux.org/pipermail/aur-dev/2016-May/004036.html
declare -i delay=300
declare list=packages.gz

curl_date() {
    curl -fsSI "$1" | awk -F', ' '/^Date:/ {print $2}'
}

curl_unzip() {
    curl -fsS "$1" -o - | gzip -d - > "$2" || return
}

sync_list() {
    declare -r uri=$1
    declare plain=${uri##*/}
    declare plain=${plain%.*}

    if [[ -s $plain ]]; then
        declare -i epoch_l epoch_r

        # Use HTTP date to compare the generation date (first line).
        # https://bugs.archlinux.org/task/49092
        read -r epoch_l < <(date -d "$(awk -F', ' '{print $3; exit}' "$plain")" '+%s')
        read -r epoch_r < <(date -d "$(curl_date "$uri")" '+%s')

        if ((epoch_l)) && ((epoch_r)) && ((epoch_r - epoch_l > delay)); then
            curl_unzip "$uri" "$plain"
        fi
    else
        curl_unzip "$uri" "$plain"
    fi
}

readonly -f curl_date curl_unzip sync_list

source /usr/share/makepkg/util.sh || exit

if [[ -t 2 ]]; then
    colorize
fi

while getopts :bt OPT; do
    case "$OPT" in
        b) list=pkgbase.gz ;;
        t) delay=$OPTARG ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

mkdir -p     "$cache"
chmod -c 700 "$cache"
cd_safe      "$cache"

# Takes an URI to a compressed package list
sync_list "$aurweb/$list" || exit

# Remove the generation date before matching.
pcregrep "$@" <(tail -n +2 "${list%.*}")

# vim: set et sw=4 sts=4 ft=sh:
