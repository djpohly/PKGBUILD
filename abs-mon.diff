diff -r 406003e3a01f dwm.c
--- a/dwm.c	Mon Sep 27 07:53:44 2010 +0000
+++ b/dwm.c	Wed Nov 10 14:43:23 2010 -0500
@@ -167,28 +167,28 @@ static void clientmessage(XEvent *e);
 static void configure(Client *c);
 static void configurenotify(XEvent *e);
 static void configurerequest(XEvent *e);
 static Monitor *createmon(void);
 static void destroynotify(XEvent *e);
 static void detach(Client *c);
 static void detachstack(Client *c);
 static void die(const char *errstr, ...);
-static Monitor *dirtomon(int dir);
 static void drawbar(Monitor *m);
 static void drawbars(void);
 static void drawsquare(Bool filled, Bool empty, Bool invert, unsigned long col[ColLast]);
 static void drawtext(const char *text, unsigned long col[ColLast], Bool invert);
 static void enternotify(XEvent *e);
 static void expose(XEvent *e);
 static void focus(Client *c);
 static void focusin(XEvent *e);
 static void focusmon(const Arg *arg);
 static void focusstack(const Arg *arg);
 static unsigned long getcolor(const char *colstr);
+static Monitor *getmon(unsigned int n);
 static Bool getrootptr(int *x, int *y);
 static long getstate(Window w);
 static Bool gettextprop(Window w, Atom atom, char *text, unsigned int size);
 static void grabbuttons(Client *c, Bool focused);
 static void grabkeys(void);
 static void initfont(const char *fontstr);
 static Bool isprotodel(Client *c);
 static void keypress(XEvent *e);
@@ -657,33 +657,16 @@ die(const char *errstr, ...) {
 	va_list ap;
 
 	va_start(ap, errstr);
 	vfprintf(stderr, errstr, ap);
 	va_end(ap);
 	exit(EXIT_FAILURE);
 }
 
-Monitor *
-dirtomon(int dir) {
-	Monitor *m = NULL;
-
-	if(dir > 0) {
-		if(!(m = selmon->next))
-			m = mons;
-	}
-	else {
-		if(selmon == mons)
-			for(m = mons; m->next; m = m->next);
-		else
-			for(m = mons; m->next != selmon; m = m->next);
-	}
-	return m;
-}
-
 void
 drawbar(Monitor *m) {
 	int x;
 	unsigned int i, occ = 0, urg = 0;
 	unsigned long *col;
 	Client *c;
 
 	for(c = m->clients; c; c = c->next) {
@@ -842,17 +825,17 @@ focusin(XEvent *e) { /* there are some b
 }
 
 void
 focusmon(const Arg *arg) {
 	Monitor *m;
 
 	if(!mons->next)
 		return;
-	if((m = dirtomon(arg->i)) == selmon)
+	if((m = getmon(arg->ui)) == selmon)
 		return;
 	unfocus(selmon->sel, True);
 	selmon = m;
 	focus(NULL);
 }
 
 void
 focusstack(const Arg *arg) {
@@ -885,16 +868,25 @@ getcolor(const char *colstr) {
 	Colormap cmap = DefaultColormap(dpy, screen);
 	XColor color;
 
 	if(!XAllocNamedColor(dpy, cmap, colstr, &color, &color))
 		die("error, cannot allocate color '%s'\n", colstr);
 	return color.pixel;
 }
 
+Monitor *
+getmon(unsigned int n) {
+	Monitor *m;
+
+	for(m = mons; n > 0 && m != NULL; n--)
+		m = m->next;
+	return m;
+}
+
 Bool
 getrootptr(int *x, int *y) {
 	int di;
 	unsigned int dui;
 	Window dummy;
 
 	return XQueryPointer(dpy, root, &dummy, &dummy, x, y, &di, &di, &dui);
 }
@@ -1607,17 +1599,17 @@ tag(const Arg *arg) {
 		arrange(selmon);
 	}
 }
 
 void
 tagmon(const Arg *arg) {
 	if(!selmon->sel || !mons->next)
 		return;
-	sendmon(selmon->sel, dirtomon(arg->i));
+	sendmon(selmon->sel, getmon(arg->ui));
 }
 
 int
 textnw(const char *text, unsigned int len) {
 	XRectangle r;
 
 	if(dc.font.set) {
 		XmbTextExtents(dc.font.set, text, len, NULL, &r);
