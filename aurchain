#!/bin/bash
# shellcheck disable=SC2016
readonly argv0=aurchain
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o noclobber

declare all=0 copydir=/dev/null

count() {
    declare -i num

    if num=$(jq '[.[].resultcount] | reduce .[] as $c (0; . + $c)' "$1"); then
        printf '%s\n' "$num"
    else
        error "$argv0: invalid argument"
        exit 22
    fi
}

pair() {
    jq -r '.[].results[]
        | .Name as $name
        | ([$name] + .Depends + .MakeDepends + .CheckDepends)[]?
        | [$name, .] | @tsv' "$1" | sed -r 's/[<>=].*$//g'
}

fld() {
    awk -v F="$1" '{print $(F)}' "${@:2}" | sort -u
}

chain() {
    declare -i num

    aursearch -Fr -- "$@" > json/0 || exit
    num=$(count json/0)

    if [[ $num -lt 1 ]]; then
        error "$argv0: no packages found"
        exit 1
    fi

    for ((a = 1; a <= 30; ++a)); do
        declare -i sub=$((a-1))

        pair json/$sub > tsv/$sub

        fld 1 tsv/$sub >> pkgname
        fld 1 tsv/$sub >> seen

        sort -u tsv/$sub >> tsv/n

        # Avoid querying duplicates (#4)
        readarray -t target < <(fld 2 tsv/$sub | grep -Fxvf seen)

        if [[ ${target[@]} ]]; then
            aursearch -Fr -- "${target[@]}" > json/$a || exit
        else
            break
        fi

        num=$(count json/$a)

        if [[ $num -lt 1 ]]; then
            break
        else
            fld 2 tsv/$sub >> seen
        fi
    done

    if ((a > 30)); then
        error "$argv0: total requests: $((++a)) (out of range)"
        exit 34
    fi

    if ! tsort tsv/n; then
        error "$argv0: invalid argument"
        exit 22
    fi
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    plain "usage: $argv0 [-a] pkgname..."
    exit 1
}

source /usr/share/makepkg/util.sh || exit

[[ -t 2 ]] && colorize

while getopts :at: OPT; do
    case $OPT in
        a) all=1 ;;
        t) copydir=$OPTARG ;;
        *) usage ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

if ((!$#)); then
    usage
fi

tmp=$(mktemp -dt "$argv0".XXXXXXXX) || exit
trap 'trap_exit' EXIT

cd_safe "$tmp"
mkdir {json,tsv} || exit

# Generate dependency tree and pkgname list (pkgname).
chain "$@" > tree

if ((all)); then
    tac tree
else
    grep -Fxf pkgname tree | tac
fi

if [[ -d $copydir ]]; then
    cp -nr json -t "$copydir"
fi

# vim: set et sw=4 sts=4 ft=sh:
