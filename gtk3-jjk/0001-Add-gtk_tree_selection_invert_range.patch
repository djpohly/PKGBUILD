From bb87bcd3f2c7632c1aa4d900097c65cd5ac9e5c1 Mon Sep 17 00:00:00 2001
From: Olivier Brunel <jjk@jjacky.com>
Date: Tue, 15 Oct 2013 16:42:05 +0200
Subject: [PATCH] Add gtk_tree_selection_invert_range()

Similar to its select & unselect counterparts, but to invert the current state
of each node in the given range.

Signed-off-by: Olivier Brunel <jjk@jjacky.com>
---
 docs/reference/gtk/gtk3-sections.txt |  1 +
 gtk/gtktreeselection.c               | 37 ++++++++++++++++++++++++++++++++++--
 gtk/gtktreeselection.h               |  4 ++++
 3 files changed, 40 insertions(+), 2 deletions(-)

diff --git a/docs/reference/gtk/gtk3-sections.txt b/docs/reference/gtk/gtk3-sections.txt
index 3231a19..4f43027 100644
--- a/docs/reference/gtk/gtk3-sections.txt
+++ b/docs/reference/gtk/gtk3-sections.txt
@@ -4424,6 +4424,7 @@ gtk_tree_selection_select_all
 gtk_tree_selection_unselect_all
 gtk_tree_selection_select_range
 gtk_tree_selection_unselect_range
+gtk_tree_selection_invert_range
 <SUBSECTION Standard>
 GTK_TREE_SELECTION
 GTK_IS_TREE_SELECTION
diff --git a/gtk/gtktreeselection.c b/gtk/gtktreeselection.c
index 06c3dd8..e959423 100644
--- a/gtk/gtktreeselection.c
+++ b/gtk/gtktreeselection.c
@@ -1287,7 +1287,8 @@ gtk_tree_selection_unselect_all (GtkTreeSelection *selection)
 enum
 {
   RANGE_SELECT,
-  RANGE_UNSELECT
+  RANGE_UNSELECT,
+  RANGE_INVERT
 };
 
 static gint
@@ -1345,7 +1346,10 @@ gtk_tree_selection_real_modify_range (GtkTreeSelection *selection,
 
   do
     {
-      dirty |= gtk_tree_selection_real_select_node (selection, start_tree, start_node, (mode == RANGE_SELECT)?TRUE:FALSE);
+      gboolean select;
+      select = (mode == RANGE_SELECT || (mode == RANGE_INVERT &&
+                  !((start_node->flags & GTK_RBNODE_IS_SELECTED) == GTK_RBNODE_IS_SELECTED)));
+      dirty |= gtk_tree_selection_real_select_node (selection, start_tree, start_node, select);
 
       if (start_node == end_node)
 	break;
@@ -1428,6 +1432,35 @@ gtk_tree_selection_unselect_range (GtkTreeSelection *selection,
     g_signal_emit (selection, tree_selection_signals[CHANGED], 0);
 }
 
+/**
+ * gtk_tree_selection_invert_range:
+ * @selection: A #GtkTreeSelection
+ * @start_path: The initial node of the range
+ * @end_path: The final node of the range
+ *
+ * Inverts the selected state of all nodes in the range, determined by
+ * @start_path and @end_path inclusive.
+ *
+ * Since: 3.10
+ */
+void
+gtk_tree_selection_invert_range (GtkTreeSelection *selection,
+                                 GtkTreePath      *start_path,
+                                 GtkTreePath      *end_path)
+{
+  GtkTreeSelectionPrivate *priv;
+
+  g_return_if_fail (GTK_IS_TREE_SELECTION (selection));
+
+  priv = selection->priv;
+
+  g_return_if_fail (priv->tree_view != NULL);
+  g_return_if_fail (gtk_tree_view_get_model (priv->tree_view) != NULL);
+
+  if (gtk_tree_selection_real_modify_range (selection, RANGE_INVERT, start_path, end_path))
+    g_signal_emit (selection, tree_selection_signals[CHANGED], 0);
+}
+
 gboolean
 _gtk_tree_selection_row_is_selectable (GtkTreeSelection *selection,
 				       GtkRBNode        *node,
diff --git a/gtk/gtktreeselection.h b/gtk/gtktreeselection.h
index be1567f..a792cd7 100644
--- a/gtk/gtktreeselection.h
+++ b/gtk/gtktreeselection.h
@@ -169,6 +169,10 @@ GDK_AVAILABLE_IN_ALL
 void             gtk_tree_selection_unselect_range      (GtkTreeSelection            *selection,
                                                          GtkTreePath                 *start_path,
 							 GtkTreePath                 *end_path);
+GDK_AVAILABLE_IN_3_10
+void             gtk_tree_selection_invert_range        (GtkTreeSelection            *selection,
+							 GtkTreePath                 *start_path,
+							 GtkTreePath                 *end_path);
 
 
 G_END_DECLS
-- 
1.9.2

